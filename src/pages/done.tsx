import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";
import { Button, Form, Input, InputGroup } from "react-daisyui";
import { useForm } from "react-hook-form";
import { useRouter } from "next/router";
import { atom } from "jotai";
import { useAtom } from "jotai";
import { useEffect, useState } from "react";
import { matchIdAtom } from "./chat/[matchId]";
import { userIdAtom } from ".";

const Done: NextPage = () => {
  const [userId] = useAtom(userIdAtom);
  const [matchId] = useAtom(matchIdAtom);
  const [feedbackSent, setFeedbackSent] = useState(false);
  const router = useRouter();
  const feedBackMutation = trpc.useMutation("matches.setFeedback");
  const getMatchQuery = trpc.useQuery(["matches.getMatch", { matchId }]);

  useEffect(() => {
    const interval = setInterval(() => {
      getMatchQuery.refetch();
    }, 5000);
    return () => clearInterval(interval);
  }, [getMatchQuery]);

  const bothProvidedFeedback =
    getMatchQuery.data?.sinkFeedback && getMatchQuery.data?.sourceFeedback;

  const bothLiked =
    getMatchQuery.data?.sourceFeedback === "Like" &&
    getMatchQuery.data?.sinkFeedback === "Like";

  const isSinkUser = getMatchQuery.data?.sinkUserId === userId;
  let otherUser = isSinkUser
    ? getMatchQuery.data?.sourceUser.contactInfo
    : getMatchQuery.data?.sinkUser.contactInfo;

  const FeedBack = async (FeedBack: string) => {
    await feedBackMutation.mutateAsync({ feedBack: FeedBack, matchId, userId });
    setFeedbackSent(true);
  };

  useEffect(() => {
    if (!userId) router.push("/");
  }, [userId, router]);

  return (
    <>
      <Head>
        <title>Rating | Done</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex flex-col items-center justify-center min-h-screen p-4">
        <h1>Date Over</h1>

        <div className="flex gap-3 flex-col">
          {!feedbackSent && (
            <div className="flex gap-2">
              <Button
                color="success"
                onClick={() => {
                  FeedBack("Like");
                }}
              >
                Like
              </Button>
              <Button
                color="error"
                onClick={() => {
                  FeedBack("disLike");
                }}
              >
                disLike
              </Button>
            </div>
          )}

          {feedbackSent && !bothProvidedFeedback && (
            <div>Waiting for other user to give like or dislike</div>
          )}

          {bothProvidedFeedback && bothLiked && (
            <div>There contact info: {otherUser}</div>
          )}

          {bothProvidedFeedback && (
            <Button onClick={() => router.push("/waiting")}>
              Back to Waiting
            </Button>
          )}
        </div>
      </main>
    </>
  );
};

export default Done;
